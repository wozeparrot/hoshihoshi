#!/usr/bin/env python

# python stdlib imports
from argparse import ArgumentParser
from multiprocessing import Process, Queue
import queue
import threading
import time
import signal
import sys
from typing import Tuple
import json
from http.server import HTTPServer, SimpleHTTPRequestHandler

# 3rd party imports
import cv2
from hh.utils import eprint
import numpy as np
from websocket_server import WebsocketServer as WSServer

# import our own stuff
import hh.face_mesh
import hh.face_features
from hh.smoother import SmootherKF, SmootherDEMA, SmootherTEMA, SmootherOneEuro


# --- CONFIG ---
DEBUG = 1
SETTINGS = {
    "exaggeration_factor": 1.0,
    "head": {
        "rotation_offsets": (20, 0, 0),
    },
    "eye": {
        "exaggeration_factor": 1.0,
    },
}

# --- MAIN ---
# thread event to stop all threads
stop_all = threading.Event()


class ThreadedServer(Process):
    def __init__(self):
        super(ThreadedServer, self).__init__()

        self.killed = False

    def stop(self):
        self.killed = True
        self.httpd.shutdown()

    def run(self):
        class Handler(SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory="index/", **kwargs)

        self.httpd = HTTPServer(("", 8080), Handler)
        self.httpd.serve_forever()


class ThreadedCapture(Process):
    def __init__(self, q: Queue, src=0, frame_size=(320, 240)):
        super(ThreadedCapture, self).__init__()

        self.q = q

        self.cap = cv2.VideoCapture(src)
        assert self.cap.isOpened(), "Cannot open camera"
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, frame_size[0])
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, frame_size[1])
        self.cap.set(cv2.CAP_PROP_FPS, 1)

        self.killed = False

    def stop(self):
        self.killed = True

    def run(self):
        while not self.killed:
            start_time = time.time()

            g, f = self.cap.read()
            if g:
                f = cv2.flip(f, 0)
                try:
                    self.q.put_nowait((f, start_time))
                except queue.Full:
                    continue

        self.cap.release()


class ThreadedOutput(Process):
    def __init__(self, q: Queue):
        super(ThreadedOutput, self).__init__()

        self.q = q

        self.killed = False

    def stop(self):
        self.killed = True

    def run(self):
        server = WSServer(host="0.0.0.0", port=6789)
        server.run_forever(threaded=True)

        clients = []

        def ws_new_client(client, server):
            clients.append(client)

        server.set_fn_new_client(ws_new_client)

        def ws_client_leave(client, server):
            clients.remove(client)

        server.set_fn_client_left(ws_client_leave)

        def ws_message(client, server, message):
            if len(clients) >= 2:
                for i in range(1, len(clients)):
                    server.send_message(clients[i], message)

        server.set_fn_message_received(ws_message)

        while not self.killed:
            f = self.q.get()
            if len(clients) > 0:
                try:
                    server.send_message_to_all(json.dumps(f[2]))
                except:
                    pass

            if DEBUG > 0:
                b, jpeg = cv2.imencode(".jpg", f[0])
                if not b:
                    continue

                sys.stdout.buffer.write(jpeg.tobytes())


class ThreadedProcessing(Process):
    def __init__(
        self,
        iq: Queue,
        oq: Queue,
        frame_size: Tuple = (320, 240),
    ):
        super(ThreadedProcessing, self).__init__()

        self.iq = iq
        self.oq = oq

        self.face_features = hh.face_features.FaceFeaturesCalculator(
            frame_size, debug=DEBUG
        )

        self.head_rotation_smoothers = [
            SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(3)
        ]
        self.head_translation_smoothers = [
            SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(3)
        ]
        self.mouth_ratio_smoothers = [
            SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(2)
        ]
        self.left_iris_ratio_smoothers = [
            SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(2)
        ]
        self.right_iris_ratio_smoothers = [
            SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(2)
        ]
        self.eye_ratio_smoothers = [SmootherOneEuro(0.004, 0.7, 1.0) for _ in range(2)]

        self.head_rotation = np.zeros((3, 1))
        self.head_translation = np.zeros((3, 1))
        self.mouth_ratio = np.zeros((2, 1))
        self.left_iris_ratio = np.zeros((2, 1))
        self.right_iris_ratio = np.zeros((2, 1))
        self.eye_ratios = np.zeros((2, 1))

        self.time_smoother = SmootherKF()
        self.prev_time = time.time()
        self.dt = 0.0

        self.camera_matrix = np.array(
            [
                [frame_size[1], 0, frame_size[1] / 2],
                [0, frame_size[1], frame_size[0] / 2],
                [0, 0, 1],
            ],
            dtype=np.float64,
        )
        self.dist_co = np.zeros((4, 1), dtype=np.float32)

        self.killed = False

    def stop(self):
        self.killed = True

    def run(self):
        # initialize face landmark system
        self.face_mesh = hh.face_mesh.FaceMeshDetector(debug=DEBUG)

        self.dt = time.time() - self.prev_time
        while not self.killed:
            frame, start_time = self.iq.get()

            # get face landmarks
            frame.flags.writeable = False
            frame, lmks, norm_lmks = self.face_mesh.run(frame)

            # verify that there is a face
            if lmks is not None:
                # get head tracking data
                (
                    frame,
                    raw_head_rotation,
                    raw_head_translation,
                ) = self.face_features.head(frame, lmks, norm_lmks)
                for i in range(3):
                    self.head_rotation_smoothers[i].update(
                        raw_head_rotation[i], self.dt
                    )
                    self.head_rotation[i] = (
                        self.head_rotation_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                    ) + SETTINGS["head"]["rotation_offsets"][i]
                    self.head_translation_smoothers[i].update(
                        raw_head_translation[i], self.dt
                    )
                    self.head_translation[i] = (
                        self.head_translation_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                    )

                # get mouth tracking data
                frame, raw_mouth_ratio = self.face_features.mouth(
                    frame, lmks, norm_lmks
                )
                for i in range(2):
                    self.mouth_ratio_smoothers[i].update(raw_mouth_ratio[i], self.dt)
                    self.mouth_ratio[i] = (
                        self.mouth_ratio_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                    )

                # get iris tracking data
                (
                    frame,
                    raw_left_iris_ratio,
                    raw_right_iris_ratio,
                    raw_eye_ratios,
                ) = self.face_features.eye(frame, lmks, norm_lmks)
                for i in range(2):
                    self.left_iris_ratio_smoothers[i].update(
                        raw_left_iris_ratio[i], self.dt
                    )
                    self.left_iris_ratio[i] = (
                        self.left_iris_ratio_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                        * SETTINGS["eye"]["exaggeration_factor"]
                    )
                    self.right_iris_ratio_smoothers[i].update(
                        raw_right_iris_ratio[i], self.dt
                    )
                    self.right_iris_ratio[i] = (
                        self.right_iris_ratio_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                        * SETTINGS["eye"]["exaggeration_factor"]
                    )
                    self.eye_ratio_smoothers[i].update(raw_eye_ratios[i], self.dt)
                    self.eye_ratios[i] = (
                        self.eye_ratio_smoothers[i].state
                        * SETTINGS["exaggeration_factor"]
                        * SETTINGS["eye"]["exaggeration_factor"]
                    )

                if self.head_rotation[1] > 15:
                    self.right_iris_ratio = self.left_iris_ratio
                elif self.head_rotation[1] < -15:
                    self.left_iris_ratio = self.right_iris_ratio
                else:
                    old_left_iris_ratio = self.left_iris_ratio
                    self.left_iris_ratio = lerp(
                        0.45, self.left_iris_ratio, self.right_iris_ratio
                    )
                    self.right_iris_ratio = lerp(
                        0.45, self.right_iris_ratio, old_left_iris_ratio
                    )

                if DEBUG > 0:
                    # draw head pose axis
                    head_sin_pitch, head_sin_yaw, head_sin_roll = np.sin(
                        np.deg2rad(self.head_rotation)
                    )
                    head_cos_pitch, head_cos_yaw, head_cos_roll = np.cos(
                        np.deg2rad(self.head_rotation)
                    )
                    head_center = np.mean(lmks, axis=0).reshape((2, 1))
                    head_axis = np.array(
                        [
                            (
                                head_cos_yaw * head_cos_roll,
                                head_cos_pitch * head_sin_roll
                                + head_cos_roll * head_sin_pitch * head_sin_yaw,
                            ),
                            (
                                -head_cos_yaw * head_sin_roll,
                                head_cos_pitch * head_cos_roll
                                - head_sin_pitch * head_sin_yaw * head_sin_roll,
                            ),
                            (head_sin_yaw, -head_cos_yaw * head_sin_pitch),
                        ]
                    )
                    head_axis *= 80
                    head_axis += head_center
                    cv2.line(
                        frame,
                        (int(head_center[0]), int(head_center[1])),
                        (int(head_axis[0][0]), int(head_axis[0][1])),
                        (0, 0, 255),
                        3,
                    )
                    cv2.line(
                        frame,
                        (int(head_center[0]), int(head_center[1])),
                        (int(head_axis[1][0]), int(head_axis[1][1])),
                        (0, 255, 0),
                        3,
                    )
                    cv2.line(
                        frame,
                        (int(head_center[0]), int(head_center[1])),
                        (int(head_axis[2][0]), int(head_axis[2][1])),
                        (255, 0, 0),
                        3,
                    )

                    # draw iris circles
                    cv2.circle(
                        frame,
                        (
                            int(self.left_iris_ratio[0] * (frame.shape[1] / 3))
                            + int(frame.shape[1] / 2),
                            int(self.left_iris_ratio[1] * (frame.shape[0] / 3))
                            + int(frame.shape[0] / 2),
                        ),
                        4,
                        (0, 0, 255),
                        2,
                    )
                    cv2.circle(
                        frame,
                        (
                            int(self.right_iris_ratio[0] * (frame.shape[1] / 3))
                            + int(frame.shape[1] / 2),
                            int(self.right_iris_ratio[1] * (frame.shape[0] / 3))
                            + int(frame.shape[0] / 2),
                        ),
                        4,
                        (0, 255, 255),
                        2,
                    )

            try:
                self.oq.put_nowait(
                    (
                        frame if DEBUG > 0 else None,
                        start_time,
                        {
                            "head_rotation": {
                                "x": float(self.head_rotation[0]),
                                "y": float(self.head_rotation[1]),
                                "z": float(self.head_rotation[2]),
                            },
                            "head_translation": {
                                "x": float(self.head_translation[0]),
                                "y": float(self.head_translation[1]),
                                "z": float(self.head_translation[2]),
                            },
                            "iris": {
                                "x": float(
                                    (self.left_iris_ratio[0] + self.right_iris_ratio[0])
                                    / 2.0
                                ),
                                "y": -float(
                                    (self.left_iris_ratio[1] + self.right_iris_ratio[1])
                                    / 2.0
                                ),
                            },
                            "eye": {
                                "left": float(self.eye_ratios[0]),
                                "right": float(self.eye_ratios[1]),
                            },
                            "mouth": {
                                "x": float(self.mouth_ratio[0]),
                                "y": float(self.mouth_ratio[1]) * 2.0 - 1.0,
                            },
                        },
                    )
                )
            except queue.Full:
                continue

            if DEBUG > 1:
                self.time_smoother.update(
                    time.time() - start_time, time.time() - self.prev_time
                )
                eprint(self.time_smoother.state)

            self.dt = time.time() - self.prev_time
            self.prev_time = time.time()


def lerp(c, a, b):
    return ((1 - c) * a) + (c * b)


def main(args) -> None:
    cap_queue = Queue(4)
    cap = ThreadedCapture(cap_queue, args.camera)
    cap.start()

    out_queue = Queue(4)
    out = ThreadedOutput(out_queue)
    out.start()

    proc = ThreadedProcessing(cap_queue, out_queue)
    proc.start()

    serv = ThreadedServer()
    serv.start()

    stop_all.wait()

    serv.terminate()
    out.terminate()
    proc.terminate()
    cap.terminate()


# catch sigint to cleanup nicely
def signal_handler(sig, frame):
    _ = sig, frame
    stop_all.set()


signal.signal(signal.SIGINT, signal_handler)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--camera", type=str, help="camera to read from", default=0)

    main(parser.parse_args())
